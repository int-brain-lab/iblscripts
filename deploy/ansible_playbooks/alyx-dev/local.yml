---
- name: alyx-dev playbook
  hosts: localhost
  connection: local
  vars_files:
    - vars.yml
  tasks:
    # OS and Apache Mod Tasks
    - name: Ensure hostname is set
      hostname:
        name: "{{ os_host_name }}"

    - name: Ensure required apt packages are present
      apt:
        pkg:
          - apache2
          - apache2-utils
          - awscli
          - certbot
          - git
          - libapache2-mod-wsgi-py3
          - postgresql
          - python3-certbot-apache
          - python3-pip
          - python3-virtualenv
        update_cache: yes
        state: latest
        autoclean: yes
      become: true

    - name: Enable apache2 modules
      apache2_module:
        name: "{{ item }}"
      with_items:
        - rewrite
        - ssl
        - wsgi
      become: true


    # Logging Tasks
    - name: Ensure IBL log directory exists
      file:
        path: "{{ ibl_log_dir }}"
        state: directory
        owner: "{{ os_user }}"
        group: "{{ os_group }}"
        mode: 0775

    - name: Ensure log files exist
      file:
        path: "{{ item }}"
        state: touch
        owner: "{{ os_user }}"
        group: "{{ os_group }}"
        mode: 0664
        modification_time: preserve
        access_time: preserve
      with_items:
        - "{{ ansible_log_path }}"
        - "{{ certbot_log_path }}"


    # Alyx Config Tasks
    - name: Git clone alyx repo
      git:
        repo: https://github.com/cortex-lab/alyx.git
        dest: "{{ git_alyx_dir }}"

    - name: Update apache alyx dir
      copy:
        src: "{{ git_alyx_dir }}"
        dest: /var/www
      become: true

    - name: Ensure alyx python package requirements are installed inside virtualenv
      pip:
        virtualenv: "{{ apache_alyx_dir }}/venv"
        requirements: "{{ apache_alyx_dir }}/requirements.txt"
      become: true

    - name: Ensure alyx settings files exist
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ apache_user }}"
        group: "{{ apache_group }}"
        mode: 0775
      with_items:
        - { src: "{{ conf_file_dir }}/settings.py-{{ os_host_name }}",
            dest: "{{ apache_alyx_dir }}/alyx/alyx/settings.py" }
        - { src: "{{ conf_file_dir }}/settings_secret.py-{{ os_host_name }}",
            dest: "{{ apache_alyx_dir }}/alyx/alyx/settings_secret.py" }
        - { src: "{{ conf_file_dir }}/settings_lab.py-{{ os_host_name }}",
            dest: "{{ apache_alyx_dir }}/alyx/alyx/settings_lab.py" }
      become: true

    - name: Ensure alyx backup directories exist
      file:
        path: "{{ item }}"
        state: directory
        owner: "{{ apache_user }}"
        group: "{{ apache_group }}"
        mode: 0775
      become: true
      with_items:
        - /backups/tables
        - /backups/uploaded

    - name: Ensure alyx log file exists
      file:
        path: "{{ alyx_log_path }}"
        state: touch
        owner: "{{ apache_user }}"
        group: "{{ apache_group }}"
        mode: 0664
        modification_time: preserve
        access_time: preserve
      become: true

    - name: Ensure apache alyx directory ownership
      file:
        path: "{{ apache_alyx_dir }}"
        owner: "{{ apache_user }}"
        group: "{{ apache_group }}"
        recurse: yes
      become: true

    - name: Ensure alyx venv has been added to system-wide $PATH.
      copy:
        dest: /etc/profile.d/custom-path.sh
        content: "PATH=$PATH:{{ alyx_virt_env }}/bin"
      become: true

    - name: Ensure system wide environment variables exist
      lineinfile:
        path: /etc/environment
        line: "{{ item }}"
      become: true
      with_items:
        - VIRTUAL_ENV={{ alyx_virt_env }}
        - APACHE_RUN_USER={{ apache_user }}
        - APACHE_RUN_GROUP={{ apache_group }}
        - APACHE_LOCK_DIR={{ apache_lock_dir }}
        - APACHE_LOG_DIR={{ apache_log_dir }}
        - APACHE_PID_FILE={{ apache_pid_path }}
        - APACHE_SERVER_NAME={{ apache_server_name }}


    # iblalyx Config Tasks
    - name: Git clone iblalyx repo
      git:
        repo: https://github.com/int-brain-lab/iblalyx.git
        dest: "{{ git_iblalyx_dir }}"
        clone: yes
        update: yes

    - name: symlink iblalyx reports
      file:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        state: link
      become: true
      with_items:
        - { src: "{{ git_iblalyx_dir }}/management/ibl_reports", dest: "{{ apache_alyx_dir }}/alyx/ibl_reports" }
        - { src: "{{ git_iblalyx_dir }}/management/ibl_reports/templates",
            dest: "{{ apache_alyx_dir }}/alyx/templates/ibl_reports" }


    # Ensure remaining apache config files are in place with correct owner
    - name: Ensure apache settings files exist
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: "{{ apache_user }}"
        group: "{{ apache_group }}"
        mode: 0775
      become: true
      with_items:
        - { src: "{{ conf_file_dir }}/apache-conf-{{ os_host_name }}", dest: /etc/apache2/apache2.conf }
        - { src: "{{ conf_file_dir }}/000-default-conf-{{ os_host_name }}", dest: /etc/apache2/sites-available/000-default.conf }
        - { src: "{{ conf_file_dir }}/ip-whitelist-conf", dest: /etc/apache2/sites-available/ip_whitelist.conf }

    - name: Set owners to alyx
      file:
        dest: "{{ apache_alyx_dir }}"
        owner: "{{ apache_user }}"
        group: "{{ apache_group }}"
        recurse: yes
      become: yes


    # Certbot Config Tasks
    - name: Ensure Apache SSL directory exists
      file:
        path: /etc/apache2/ssl/
        state: directory
      become: true

    - name: Ensure certbot files exist
      copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
      become: true
      with_items:
        - { src: "{{ conf_file_dir }}/fullchain.pem-{{ os_host_name }}", dest: "{{ cert_fullchain_path }}" }
        - { src: "{{ conf_file_dir }}/privkey.pem-{{ os_host_name }}", dest: "{{ cert_privkey_path }}" }

    - name: Certbot Init
      command: /bin/bash {{ git_iblalyx_dir }}/crons/renew_docker_certs.sh {{ os_host_name }}  # script restarts apache service
      args:
        creates: "{{ os_user_home_dir }}/.certbot_init.flag"
      become: true
      notify: Create certbot init flag

  handlers:
    # Flag handler
    - name: Create certbot init flag
      file:
        path: "{{ os_user_home_dir }}/.certbot_init.flag"
        state: touch
        modification_time: preserve
        access_time: preserve
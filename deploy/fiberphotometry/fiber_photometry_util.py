"""
Utility functions for fiber photometry form
"""
import os
import subprocess
import tempfile
from pathlib import Path

import yaml
from iblutil.util import get_logger

log = get_logger(name="fiber_photometry_form", file=True)

with open("fp_params.yml") as file:
    fp_params = yaml.safe_load(file)


def convert_ui_file_to_py(file_location: str, output_file_name: str) -> str:
    """
    Converts ui file that is generated by Qt Designer to py

    Parameters
    ----------
    file_location: str
        location of the ui file
    output_file_name: str
        the name of the output file

    Returns
    -------
    str
        location of the resulting py file
    """
    if not Path(file_location).exists():
        log.error(f"{file_location} - UI file does not exist, exiting...")
        exit(1)
    sp_cmd = ["pyuic5", f"--output={output_file_name}", file_location]
    try:
        subprocess.run(sp_cmd)
        log.debug(f"{file_location} file converted to .py file named: {output_file_name}")
    except subprocess.SubprocessError as msg:
        log.error(f"Something went wrong when calling the pyuic5 command. This is used to convert Qt Designer ui files.\n"
                  f"ui file location: {file_location}\nouput file name: {output_file_name}\nerror message:\n{msg}")
    return output_file_name


def create_data_dirs(test=False) -> dict:
    """
    Creates and/or verifies the existence of several data directories necessary for the fiber photometry form to function

    Parameters
    ----------
    test
        testing mode boolean; defaults to False

    Returns
    -------
    dict
        the collection of data directories as Path entries
    """
    temp_dir = tempfile.TemporaryDirectory()
    data_dirs = {"fp_local_queued_path": Path(temp_dir.name) / "fp_local_queued_path" / "Subjects"}

    if test:
        data_dirs.update({
            "fp_local_data_path": Path(temp_dir.name) / "local" / "fp_data",
            "fp_local_bkup_path": Path(temp_dir.name) / "local" / "Subjects",
            "fp_remote_path_test": Path(temp_dir.name) / "remote" / "Subjects"
        })
        try:  # to create all temp dirs
            [os.makedirs(data_dirs[entry], exist_ok=True) for entry in data_dirs]
        except OSError as msg:
            log.error(f"Something went wrong trying to create temp file directories for testing.\n{msg}")
            exit(1)
        log.info(f"Testing mode:\n"
                 f"- local data path: {data_dirs['fp_local_data_path']}\n"
                 f"- local backup path: {data_dirs['fp_local_bkup_path']}\n"
                 f"- remote path test: {data_dirs['fp_remote_path_test']}\n"
                 f"- local queued path: {data_dirs['fp_local_queued_path']}")
    else:  # ensure data dirs exist for local storage of fiber photometry data
        if os.name == "nt":  # check on OS platform
            data_dirs.update({
                "fp_local_data_path": fp_params["fp_local_data_path"],
                "fp_local_bkup_path": fp_params["fp_local_bkup_path"]
            })
            try:  # to create local queue data folder
                os.makedirs(data_dirs["fp_local_bkup_path"], exist_ok=True)
                os.makedirs(data_dirs["fp_local_queued_path"], exist_ok=True)
            except OSError as msg:
                log.error(f"Something went wrong trying to create file directories for normal form usage.\n{msg}")
                exit(1)
            if not Path(data_dirs["fp_local_data_path"]).exists():
                log.error(f"The following configured directory does not exist: {data_dirs['fp_local_data_path']}")
                exit(1)
        else:  # not a supported os
            log.error("An untested and unsupported OS found. Run the form in test more.")
            exit(1)

    return data_dirs
